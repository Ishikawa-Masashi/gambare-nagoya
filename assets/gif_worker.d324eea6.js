(function(){"use strict";var X=-1,N=12,U=5003,at=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535];function st(t,n,e,c){var d=Math.max(2,c),C=new Uint8Array(256),b=new Int32Array(U),m=new Int32Array(U),P,x=0,T,A=0,w,_=!1,z,I,G;function i(h,l){C[T++]=h,T>=254&&a(l)}function r(h){p(U),A=I+2,_=!0,v(I,h)}function p(h){for(var l=0;l<h;++l)b[l]=-1}function s(h,l){var g,F,B,D,W,O,R;for(z=h,_=!1,n_bits=z,w=u(n_bits),I=1<<h-1,G=I+1,A=I+2,T=0,D=o(),R=0,g=U;g<65536;g*=2)++R;R=8-R,O=U,p(O),v(I,l);t:for(;(F=o())!=X;){if(g=(F<<N)+D,B=F<<R^D,b[B]===g){D=m[B];continue}else if(b[B]>=0){W=O-B,B===0&&(W=1);do if((B-=W)<0&&(B+=O),b[B]===g){D=m[B];continue t}while(b[B]>=0)}v(D,l),D=F,A<1<<N?(m[B]=A++,b[B]=g):r(l)}v(D,l),v(G,l)}function f(h){h.writeByte(d),remaining=t*n,curPixel=0,s(d+1,h),h.writeByte(0)}function a(h){T>0&&(h.writeByte(T),h.writeBytes(C,0,T),T=0)}function u(h){return(1<<h)-1}function o(){if(remaining===0)return X;--remaining;var h=e[curPixel++];return h&255}function v(h,l){for(P&=at[x],x>0?P|=h<<x:P=h,x+=n_bits;x>=8;)i(P&255,l),P>>=8,x-=8;if((A>w||_)&&(_?(w=u(n_bits=z),_=!1):(++n_bits,n_bits==N?w=1<<N:w=u(n_bits))),h==G){for(;x>0;)i(P&255,l),P>>=8,x-=8;a(l)}}this.encode=f}var nt=100,S=256,J=S-1,E=4,K=16,Q=1<<K,Y=10,q=10,ot=Q>>q,ht=Q<<Y-q,lt=S>>3,Z=6,ft=1<<Z,pt=lt*ft,ut=30,$=10,H=1<<$,V=8,j=1<<V,vt=$+V,k=1<<vt,tt=499,et=491,it=487,rt=503,ct=3*rt;function wt(t,n){var e,c,d,C,b;function m(){e=[],c=new Int32Array(256),d=new Int32Array(S),C=new Int32Array(S),b=new Int32Array(S>>3);var i,r;for(i=0;i<S;i++)r=(i<<E+8)/S,e[i]=new Float64Array([r,r,r,0]),C[i]=Q/S,d[i]=0}function P(){for(var i=0;i<S;i++)e[i][0]>>=E,e[i][1]>>=E,e[i][2]>>=E,e[i][3]=i}function x(i,r,p,s,f){e[r][0]-=i*(e[r][0]-p)/H,e[r][1]-=i*(e[r][1]-s)/H,e[r][2]-=i*(e[r][2]-f)/H}function T(i,r,p,s,f){for(var a=Math.abs(r-i),u=Math.min(r+i,S),o=r+1,v=r-1,h=1,l,g;o<u||v>a;)g=b[h++],o<u&&(l=e[o++],l[0]-=g*(l[0]-p)/k,l[1]-=g*(l[1]-s)/k,l[2]-=g*(l[2]-f)/k),v>a&&(l=e[v--],l[0]-=g*(l[0]-p)/k,l[1]-=g*(l[1]-s)/k,l[2]-=g*(l[2]-f)/k)}function A(i,r,p){var s=2147483647,f=s,a=-1,u=a,o,v,h,l,g;for(o=0;o<S;o++)v=e[o],h=Math.abs(v[0]-i)+Math.abs(v[1]-r)+Math.abs(v[2]-p),h<s&&(s=h,a=o),l=h-(d[o]>>K-E),l<f&&(f=l,u=o),g=C[o]>>q,C[o]-=g,d[o]+=g<<Y;return C[a]+=ot,d[a]-=ht,u}function w(){var i,r,p,s,f,a,u=0,o=0;for(i=0;i<S;i++){for(p=e[i],f=i,a=p[1],r=i+1;r<S;r++)s=e[r],s[1]<a&&(f=r,a=s[1]);if(s=e[f],i!=f&&(r=s[0],s[0]=p[0],p[0]=r,r=s[1],s[1]=p[1],p[1]=r,r=s[2],s[2]=p[2],p[2]=r,r=s[3],s[3]=p[3],p[3]=r),a!=u){for(c[u]=o+i>>1,r=u+1;r<a;r++)c[r]=i;u=a,o=i}}for(c[u]=o+J>>1,r=u+1;r<256;r++)c[r]=J}function _(i,r,p){for(var s,f,a,u=1e3,o=-1,v=c[r],h=v-1;v<S||h>=0;)v<S&&(f=e[v],a=f[1]-r,a>=u?v=S:(v++,a<0&&(a=-a),s=f[0]-i,s<0&&(s=-s),a+=s,a<u&&(s=f[2]-p,s<0&&(s=-s),a+=s,a<u&&(u=a,o=f[3])))),h>=0&&(f=e[h],a=r-f[1],a>=u?h=-1:(h--,a<0&&(a=-a),s=f[0]-i,s<0&&(s=-s),a+=s,a<u&&(s=f[2]-p,s<0&&(s=-s),a+=s,a<u&&(u=a,o=f[3]))));return o}function z(){var i,r=t.length,p=30+(n-1)/3,s=r/(3*n),f=~~(s/nt),a=H,u=pt,o=u>>Z;for(o<=1&&(o=0),i=0;i<o;i++)b[i]=a*((o*o-i*i)*j/(o*o));var v;r<ct?(n=1,v=3):r%tt!==0?v=3*tt:r%et!==0?v=3*et:r%it!==0?v=3*it:v=3*rt;var h,l,g,F,B=0;for(i=0;i<s;)if(h=(t[B]&255)<<E,l=(t[B+1]&255)<<E,g=(t[B+2]&255)<<E,F=A(h,l,g),x(a,F,h,l,g),o!==0&&T(o,F,h,l,g),B+=v,B>=r&&(B-=r),i++,f===0&&(f=1),i%f===0)for(a-=a/p,u-=u/ut,o=u>>Z,o<=1&&(o=0),F=0;F<o;F++)b[F]=a*((o*o-F*F)*j/(o*o))}function I(){m(),z(),P(),w()}this.buildColormap=I;function G(){for(var i=[],r=[],p=0;p<S;p++)r[e[p][3]]=p;for(var s=0,f=0;f<S;f++){var a=r[f];i[s++]=e[a][0],i[s++]=e[a][1],i[s++]=e[a][2]}return i}this.getColormap=G,this.lookupRGB=_}function M(){this.page=-1,this.pages=[],this.newPage()}M.pageSize=4096,M.charMap={};for(var L=0;L<256;L++)M.charMap[L]=String.fromCharCode(L);M.prototype.newPage=function(){this.pages[++this.page]=new Uint8Array(M.pageSize),this.cursor=0},M.prototype.getData=function(){for(var t="",n=0;n<this.pages.length;n++)for(var e=0;e<M.pageSize;e++)t+=M.charMap[this.pages[n][e]];return t},M.prototype.writeByte=function(t){this.cursor>=M.pageSize&&this.newPage(),this.pages[this.page][this.cursor++]=t},M.prototype.writeUTFBytes=function(t){for(var n=t.length,e=0;e<n;e++)this.writeByte(t.charCodeAt(e))},M.prototype.writeBytes=function(t,n,e){for(var c=e||t.length,d=n||0;d<c;d++)this.writeByte(t[d])};function y(t,n){this.width=~~t,this.height=~~n,this.transparent=null,this.transIndex=0,this.repeat=-1,this.delay=0,this.image=null,this.pixels=null,this.indexedPixels=null,this.colorDepth=null,this.colorTab=null,this.usedEntry=new Array,this.palSize=7,this.dispose=-1,this.firstFrame=!0,this.sample=10,this.dither=!1,this.globalPalette=!1,this.out=new M}y.prototype.setDelay=function(t){this.delay=Math.round(t/10)},y.prototype.setFrameRate=function(t){this.delay=Math.round(100/t)},y.prototype.setDispose=function(t){t>=0&&(this.dispose=t)},y.prototype.setRepeat=function(t){this.repeat=t},y.prototype.setTransparent=function(t){this.transparent=t},y.prototype.addFrame=function(t){this.image=t,this.colorTab=this.globalPalette.slice?this.globalPalette:null,this.getImagePixels(),this.analyzePixels(),this.globalPalette===!0&&(this.globalPalette=this.colorTab),this.firstFrame&&(this.writeLSD(),this.writePalette(),this.repeat>=0&&this.writeNetscapeExt()),this.writeGraphicCtrlExt(),this.writeImageDesc(),!this.firstFrame&&!this.globalPalette&&this.writePalette(),this.writePixels(),this.firstFrame=!1},y.prototype.finish=function(){this.out.writeByte(59)},y.prototype.setQuality=function(t){t<1&&(t=1),this.sample=t},y.prototype.setDither=function(t){t===!0&&(t="FloydSteinberg"),this.dither=t},y.prototype.setGlobalPalette=function(t){this.globalPalette=t},y.prototype.getGlobalPalette=function(){return this.globalPalette.slice&&this.globalPalette.slice(0)||this.globalPalette},y.prototype.writeHeader=function(){this.out.writeUTFBytes("GIF89a")},y.prototype.analyzePixels=function(){if(!this.colorTab){var t=new wt(this.pixels,this.sample);t.buildColormap(),this.colorTab=t.getColormap()}this.dither?this.ditherPixels(this.dither.replace("-serpentine",""),this.dither.match(/-serpentine/)!==null):this.indexPixels(),this.pixels=null,this.colorDepth=8,this.palSize=7,this.transparent!==null&&(this.transIndex=this.findClosest(this.transparent,!0))},y.prototype.indexPixels=function(t){var n=this.pixels.length/3;this.indexedPixels=new Uint8Array(n);for(var e=0,c=0;c<n;c++){var d=this.findClosestRGB(this.pixels[e++]&255,this.pixels[e++]&255,this.pixels[e++]&255);this.usedEntry[d]=!0,this.indexedPixels[c]=d}},y.prototype.ditherPixels=function(t,n){var e={FalseFloydSteinberg:[[.375,1,0],[.375,0,1],[.25,1,1]],FloydSteinberg:[[.4375,1,0],[.1875,-1,1],[.3125,0,1],[.0625,1,1]],Stucki:[[.19047619047619047,1,0],[.09523809523809523,2,0],[.047619047619047616,-2,1],[.09523809523809523,-1,1],[.19047619047619047,0,1],[.09523809523809523,1,1],[.047619047619047616,2,1],[.023809523809523808,-2,2],[.047619047619047616,-1,2],[.09523809523809523,0,2],[.047619047619047616,1,2],[.023809523809523808,2,2]],Atkinson:[[.125,1,0],[.125,2,0],[.125,-1,1],[.125,0,1],[.125,1,1],[.125,0,2]]};if(!t||!e[t])throw"Unknown dithering kernel: "+t;var c=e[t],d=0,C=this.height,b=this.width,m=this.pixels,P=n?-1:1;this.indexedPixels=new Uint8Array(this.pixels.length/3);for(var x=0;x<C;x++){n&&(P=P*-1);for(var T=P==1?0:b-1,A=P==1?b:0;T!==A;T+=P){d=x*b+T;var w=d*3,_=m[w],z=m[w+1],I=m[w+2];w=this.findClosestRGB(_,z,I),this.usedEntry[w]=!0,this.indexedPixels[d]=w,w*=3;for(var G=this.colorTab[w],i=this.colorTab[w+1],r=this.colorTab[w+2],p=_-G,s=z-i,f=I-r,a=P==1?0:c.length-1,u=P==1?c.length:0;a!==u;a+=P){var o=c[a][1],v=c[a][2];if(o+T>=0&&o+T<b&&v+x>=0&&v+x<C){var h=c[a][0];w=d+o+v*b,w*=3,m[w]=Math.max(0,Math.min(255,m[w]+p*h)),m[w+1]=Math.max(0,Math.min(255,m[w+1]+s*h)),m[w+2]=Math.max(0,Math.min(255,m[w+2]+f*h))}}}}},y.prototype.findClosest=function(t,n){return this.findClosestRGB((t&16711680)>>16,(t&65280)>>8,t&255,n)},y.prototype.findClosestRGB=function(t,n,e,c){if(this.colorTab===null)return-1;for(var d=0,C=256*256*256,b=this.colorTab.length,m=0;m<b;){var P=t-(this.colorTab[m++]&255),x=n-(this.colorTab[m++]&255),T=e-(this.colorTab[m]&255),A=P*P+x*x+T*T,w=parseInt(m/3);(!c||this.usedEntry[w])&&A<C&&(C=A,d=w),m++}return d},y.prototype.getImagePixels=function(){var t=this.width,n=this.height;this.pixels=new Uint8Array(t*n*3);for(var e=this.image,c=0,d=0;d<n;d++)for(var C=0;C<t;C++){var b=d*t*4+C*4;this.pixels[c++]=e[b],this.pixels[c++]=e[b+1],this.pixels[c++]=e[b+2]}},y.prototype.writeGraphicCtrlExt=function(){this.out.writeByte(33),this.out.writeByte(249),this.out.writeByte(4);var t,n;this.transparent===null?(t=0,n=0):(t=1,n=2),this.dispose>=0&&(n=dispose&7),n<<=2,this.out.writeByte(0|n|0|t),this.writeShort(this.delay),this.out.writeByte(this.transIndex),this.out.writeByte(0)},y.prototype.writeImageDesc=function(){this.out.writeByte(44),this.writeShort(0),this.writeShort(0),this.writeShort(this.width),this.writeShort(this.height),this.firstFrame||this.globalPalette?this.out.writeByte(0):this.out.writeByte(128|this.palSize)},y.prototype.writeLSD=function(){this.writeShort(this.width),this.writeShort(this.height),this.out.writeByte(240|this.palSize),this.out.writeByte(0),this.out.writeByte(0)},y.prototype.writeNetscapeExt=function(){this.out.writeByte(33),this.out.writeByte(255),this.out.writeByte(11),this.out.writeUTFBytes("NETSCAPE2.0"),this.out.writeByte(3),this.out.writeByte(1),this.writeShort(this.repeat),this.out.writeByte(0)},y.prototype.writePalette=function(){this.out.writeBytes(this.colorTab);for(var t=3*256-this.colorTab.length,n=0;n<t;n++)this.out.writeByte(0)},y.prototype.writeShort=function(t){this.out.writeByte(t&255),this.out.writeByte(t>>8&255)},y.prototype.writePixels=function(){var t=new st(this.width,this.height,this.indexedPixels,this.colorDepth);t.encode(this.out)},y.prototype.stream=function(){return this.out},self.onmessage=function(t){var n=t.data,e=new y(n.width,n.height);n.id===0?e.writeHeader():e.firstFrame=!1,e.setTransparent(null),e.setRepeat(0),e.setDelay(n.delay*1e3),e.setQuality(n.quality),e.setDither(n.dither),e.addFrame(n.data),n.last&&e.finish(),n.globalPalette&&(n.globalPalette=e.getGlobalPalette());var c=e.stream();postMessage({data:c.pages,cursor:c.cursor,pageSize:c.constructor.pageSize})}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,